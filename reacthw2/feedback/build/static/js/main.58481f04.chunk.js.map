{"version":3,"sources":["components/Statistics.module.css","components/Statistics.js","index.js"],"names":["module","exports","console","log","styles","FeedbackOptions","options","className","btn","onClick","leaveGood","leaveNeutral","leaveBad","Statistics","good","neutral","bad","total","positiveDomination","stat","Section","state","setState","countTotal","howManyPositive","Math","round","title","this","props","noFeedback","React","Component","App","ReactDOM","render","document","querySelector"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,MAAQ,0BAA0B,gBAAkB,oCAAoC,IAAM,wBAAwB,WAAa,+BAA+B,KAAO,yBAAyB,WAAa,iC,oJCEvQC,QAAQC,IAAI,cAAeC,KAI3B,IAAMC,EAAkB,SAAC,GAAc,IAAbC,EAAY,EAAZA,QAC1B,OACQ,yBAAKC,UAAWH,IAAOC,iBACnB,4BAAQE,UAAWH,IAAOI,IAAKC,QAASH,EAAQI,WAAhD,QACA,4BAAQH,UAAWH,IAAOI,IAAKC,QAASH,EAAQK,cAAhD,WACA,4BAAQJ,UAAWH,IAAOI,IAAKC,QAASH,EAAQM,UAAhD,SASNC,EAAa,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,KAAKC,EAAyC,EAAzCA,QAAQC,EAAiC,EAAjCA,IAAIC,EAA6B,EAA7BA,MAAMC,EAAuB,EAAvBA,mBACxC,OACA,yBAAKX,UAAWH,IAAOS,YACf,0BAAMN,UAAWH,IAAOe,MAAxB,SAAqCL,GACrC,0BAAMP,UAAWH,IAAOe,MAAxB,YAAwCJ,GACxC,0BAAMR,UAAWH,IAAOe,MAAxB,QAAoCH,GACpC,0BAAMT,UAAWH,IAAOe,MAAxB,UAAsCF,GACtC,0BAAMV,UAAWH,IAAOe,MAAxB,iCAC+BD,EAD/B,OAkEGE,E,4MAvDXC,MAAQ,CACJP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAMTN,UAAY,kBAAI,EAAKY,SAAS,CAACR,KAAM,EAAKO,MAAMP,KAAK,K,EAErDF,SAAW,kBAAK,EAAKU,SAAS,CAACN,IAAK,EAAKK,MAAML,IAAI,K,EAEnDL,aAAe,kBAAK,EAAKW,SAAS,CAACP,QAAS,EAAKM,MAAMN,QAAQ,K,EAI/DQ,WAAa,kBAAM,EAAKF,MAAMP,KAAK,EAAKO,MAAMN,QAAQ,EAAKM,MAAML,K,EAIjEQ,gBAAiB,kBAAKC,KAAKC,MAAM,IAAI,EAAKH,aAAc,EAAKF,MAAMP,O,uDAK/D,OACA,yBAAKP,UAAWH,IAAOgB,SACnB,0BAAMb,UAAWH,IAAOuB,OAAQC,KAAKC,MAAMF,OAG3C,kBAAC,EAAD,CACArB,QAAS,CACTI,UAAWkB,KAAKlB,UAChBC,aAAciB,KAAKjB,aACnBC,SAASgB,KAAKhB,YAKbgB,KAAKL,cAAc,EAClB,kBAAC,EAAD,CACFT,KAAMc,KAAKP,MAAMP,KACjBC,QAASa,KAAKP,MAAMN,QACpBC,IAAKY,KAAKP,MAAML,IAChBC,MAAOW,KAAKL,aACZL,mBAAoBU,KAAKJ,oBACvB,0BAAMjB,UAAWH,IAAO0B,YAAxB,0C,GAhDQC,IAAMC,WC/BtBC,EAAM,WACV,OACA,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAASoB,MAAM,yBAKnBO,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,cAAc,W","file":"static/js/main.58481f04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Statistics_Section__1MFBo\",\"title\":\"Statistics_title__3vLQI\",\"FeedbackOptions\":\"Statistics_FeedbackOptions__36R5v\",\"btn\":\"Statistics_btn__3WafB\",\"Statistics\":\"Statistics_Statistics__T-iO2\",\"stat\":\"Statistics_stat__2FClx\",\"noFeedback\":\"Statistics_noFeedback__1EyNt\"};","import React from 'react';\nimport styles from './Statistics.module.css'\n/* как через дефис получать класс в ксс модулях?? */\nconsole.log('styles :>> ', styles);\n\n//кнопки статистики.\n//options - это коллбек методов класса секции\nconst FeedbackOptions = ({options}) =>{\nreturn(\n        <div className={styles.FeedbackOptions}>\n            <button className={styles.btn} onClick={options.leaveGood}>Good</button>\n            <button className={styles.btn} onClick={options.leaveNeutral}>Neutral</button>\n            <button className={styles.btn} onClick={options.leaveBad}>Bad</button>\n        </div>\n\n)\n}\n//\n\n\n//принимает данные статистики и выводит их \nconst Statistics = ({good,neutral,bad,total,positiveDomination}) =>{\n    return(\n    <div className={styles.Statistics}>\n            <span className={styles.stat}>Good: {good}</span>\n            <span className={styles.stat}>Neutral: {neutral}</span>\n            <span className={styles.stat}>Bad: {bad}</span>\n            <span className={styles.stat}>Total: {total}</span>\n            <span className={styles.stat}>\n            Positive feedback domination: {positiveDomination}%\n            </span>\n        </div>\n        )\n}\n//\n\n\n//классовый компонент секции. он тут всем заправляет\nclass Section extends React.Component{\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    }\n    //сумму и процент позитивных никуда не записываю, просто возвращаю из коллбек функций\n\n\n    //коллбеки. ничего особенного.\n    leaveGood = ()=>this.setState({good: this.state.good+1});\n\n    leaveBad = () =>this.setState({bad: this.state.bad+1});\n\n    leaveNeutral = ()=> this.setState({neutral: this.state.neutral+1});\n    //\n\n    //сумма\n    countTotal = () => this.state.good+this.state.neutral+this.state.bad;\n    //\n\n    // подсчет процентов позитивных\n    howManyPositive =()=> Math.round(100/this.countTotal()*(this.state.good));\n    //\n\n\n    render(){\n        return(\n        <div className={styles.Section}>\n            <span className={styles.title}>{this.props.title}</span>\n\n        {/* не понимаю к чему в задании был onLeaveFeedback помимо options */}\n            <FeedbackOptions \n            options={{\n            leaveGood: this.leaveGood,\n            leaveNeutral: this.leaveNeutral,\n            leaveBad:this.leaveBad\n            }}/>\n\n\n            {/* проверка на статистику */}\n            {this.countTotal()>=1 \n            ? <Statistics \n            good={this.state.good}\n            neutral={this.state.neutral} \n            bad={this.state.bad} \n            total={this.countTotal()} \n            positiveDomination={this.howManyPositive()}/>\n            : <span className={styles.noFeedback}>No feedback given. U can be first</span>\n            }\n        </div>\n        )\n    }\n}\n\n\nexport default Section;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nimport Section from './components/Statistics';\n\nconst App = ()=>{\n  return(\n  <div className='App'>\n    <Section title='Plz leave feedback'/>\n  </div>\n  )\n}\n\nReactDOM.render(<App/>, document.querySelector('#root'));"],"sourceRoot":""}