{"ast":null,"code":"var _jsxFileName = \"/home/pabadm/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/GOITreactHW/reacthw2/feedback/src/components/Statistics.js\";\nimport React from 'react';\nimport styles from './Statistics.module.css'; //кнопки статистики.\n//options - это методов класса секции(коллбеки, которые я передаю)\n\nconst FeedbackOptions = ({\n  options\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles['feedback-options'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: styles['btn'],\n    onClick: options.leaveGood,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, \"Good\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: styles['btn'],\n    onClick: options.leaveNeutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, \"Neutral\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: styles['btn'],\n    onClick: options.leaveBad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, \"Bad\"));\n}; //\n//принимает данные статистики и выводит их \n\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positiveDomination\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles['Statistics'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles['stat'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, \"Good: \", good), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles['stat'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"Neutral: \", neutral), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles['stat'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \"Bad: \", bad), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles['stat'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"Total: \", total), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles['stat'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, \"Positive feedback domination: \", positiveDomination, \"%\"));\n}; //\n//классовый компонент секции. он тут всем заправляет\n//сделал его для всей отрисовки вообще. не знаю каким образом можно \n//перерисовывать сами статы без кнопок, ведь смысл кнопки перерисовывать\n//была идея сделать кнопки классом, но тогда \n\n\nclass Section extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.leaveGood = () => this.setState({\n      good: this.state.good + 1\n    });\n\n    this.leaveBad = () => this.setState({\n      bad: this.state.bad + 1\n    });\n\n    this.leaveNeutral = () => this.setState({\n      neutral: this.state.neutral + 1\n    });\n\n    this.countTotal = () => this.state.good + this.state.neutral + this.state.bad;\n\n    this.howManyPositive = () => Math.round(100 / this.countTotal() * this.state.good);\n  }\n\n  //\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['Section'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: styles['title'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, this.props.title), /*#__PURE__*/React.createElement(FeedbackOptions, {\n      options: {\n        leaveGood: this.leaveGood,\n        leaveNeutral: this.leaveNeutral,\n        leaveBad: this.leaveBad\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }), this.countTotal() >= 1 ? /*#__PURE__*/React.createElement(Statistics, {\n      good: this.state.good,\n      neutral: this.state.neutral,\n      bad: this.state.bad,\n      total: this.countTotal(),\n      positiveDomination: this.howManyPositive(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(\"span\", {\n      className: styles['noFeedback'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, \"No feedback given. U can be first\"));\n  }\n\n}\n\nexport default Section;","map":{"version":3,"sources":["/home/pabadm/Рабочий стол/GOITreactHW/reacthw2/feedback/src/components/Statistics.js"],"names":["React","styles","FeedbackOptions","options","leaveGood","leaveNeutral","leaveBad","Statistics","good","neutral","bad","total","positiveDomination","Section","Component","state","setState","countTotal","howManyPositive","Math","round","render","props","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './Statistics.module.css'\n\n\n\n//кнопки статистики.\n//options - это методов класса секции(коллбеки, которые я передаю)\nconst FeedbackOptions = ({options}) =>{\n    \nreturn(\n        <div className={styles['feedback-options']}>\n            <button className={styles['btn']} onClick={options.leaveGood}>Good</button>\n            <button className={styles['btn']} onClick={options.leaveNeutral}>Neutral</button>\n            <button className={styles['btn']} onClick={options.leaveBad}>Bad</button>\n        </div>\n\n)\n}\n//\n\n\n//принимает данные статистики и выводит их \nconst Statistics = ({good,neutral,bad,total,positiveDomination}) =>{\n    return(\n    <div className={styles['Statistics']}>\n            <span className={styles['stat']}>Good: {good}</span>\n            <span className={styles['stat']}>Neutral: {neutral}</span>\n            <span className={styles['stat']}>Bad: {bad}</span>\n            <span className={styles['stat']}>Total: {total}</span>\n            <span className={styles['stat']}>\n            Positive feedback domination: {positiveDomination}%\n            </span>\n        </div>\n        )\n}\n//\n\n\n//классовый компонент секции. он тут всем заправляет\n//сделал его для всей отрисовки вообще. не знаю каким образом можно \n//перерисовывать сами статы без кнопок, ведь смысл кнопки перерисовывать\n//была идея сделать кнопки классом, но тогда \nclass Section extends React.Component{\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    }\n    //сумму и процент позитивных никуда не записываю, просто возвращаю из коллбек функций\n\n\n    //коллбеки. ничего особенного.\n    leaveGood = ()=>this.setState({good: this.state.good+1});\n\n    leaveBad = () =>this.setState({bad: this.state.bad+1});\n\n    leaveNeutral = ()=> this.setState({neutral: this.state.neutral+1});\n    //\n\n    //сумма\n    countTotal = () => this.state.good+this.state.neutral+this.state.bad;\n    //\n\n    // подсчет процентов позитивных\n    howManyPositive =()=> Math.round(100/this.countTotal()*(this.state.good));\n    //\n\n\n    render(){\n        return(\n        <div className={styles['Section']}>\n            <span className={styles['title']}>{this.props.title}</span>\n\n        {/* не понимаю к чему в задании был onLeaveFeedback помимо options */}\n            <FeedbackOptions \n            options={{\n            leaveGood: this.leaveGood,\n            leaveNeutral: this.leaveNeutral,\n            leaveBad:this.leaveBad\n            }}/>\n\n\n            {/* проверка на статистику */}\n            {this.countTotal()>=1 \n            ? <Statistics \n            good={this.state.good}\n            neutral={this.state.neutral} \n            bad={this.state.bad} \n            total={this.countTotal()} \n            positiveDomination={this.howManyPositive()}/>\n            : <span className={styles['noFeedback']}>No feedback given. U can be first</span>\n            }\n        </div>\n        )\n    }\n}\n\n\n\nexport default Section;"]},"metadata":{},"sourceType":"module"}