{"ast":null,"code":"var _jsxFileName = \"/home/pabadm/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/GOITreactHW/reacthw2/feedback/src/components/Statistics.js\";\nimport React from 'react';\nimport styles from './Statistics.module.css';\n/* как через дефис получать класс в ксс модулях?? */\n\nconsole.log('styles :>> ', styles); //кнопки статистики.\n//options - это коллбек методов класса секции\n\nconst FeedbackOptions = ({\n  options\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.FeedbackOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: styles.btn,\n    onClick: options.leaveGood,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, \"Good\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: styles.btn,\n    onClick: options.leaveNeutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, \"Neutral\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: styles.btn,\n    onClick: options.leaveBad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, \"Bad\"));\n}; //\n//принимает данные статистики и выводит их \n\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positiveDomination\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Statistics,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.stat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, \"Good: \", good), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.stat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, \"Neutral: \", neutral), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.stat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"Bad: \", bad), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.stat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \"Total: \", total), /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.stat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"Positive feedback domination: \", positiveDomination, \"%\"));\n}; //\n//классовый компонент секции. он тут всем заправляет\n\n\nclass Section extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.leaveGood = () => this.setState({\n      good: this.state.good + 1\n    });\n\n    this.leaveBad = () => this.setState({\n      bad: bad + 1\n    });\n\n    this.leaveNeutral = () => this.setState({\n      neutral: this.state.neutral + 1\n    });\n\n    this.countTotal = () => this.state.good + this.state.neutral + this.state.bad;\n\n    this.howManyPositive = () => Math.round(100 / this.countTotal() * this.state.good);\n  }\n\n  //\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.Section,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: styles.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, this.props.title), /*#__PURE__*/React.createElement(FeedbackOptions, {\n      options: {\n        leaveGood: this.leaveGood,\n        leaveNeutral: this.leaveNeutral,\n        leaveBad: this.leaveBad\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }), this.countTotal() >= 1 ? /*#__PURE__*/React.createElement(Statistics, {\n      good: this.state.good,\n      neutral: this.state.neutral,\n      bad: this.state.bad,\n      total: this.countTotal(),\n      positiveDomination: this.howManyPositive(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(\"span\", {\n      className: styles.noFeedback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }, \"No feedback given. U can be first\"));\n  }\n\n}\n\nexport default Section;","map":{"version":3,"sources":["/home/pabadm/Рабочий стол/GOITreactHW/reacthw2/feedback/src/components/Statistics.js"],"names":["React","styles","console","log","FeedbackOptions","options","btn","leaveGood","leaveNeutral","leaveBad","Statistics","good","neutral","bad","total","positiveDomination","stat","Section","Component","state","setState","countTotal","howManyPositive","Math","round","render","title","props","noFeedback"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './Statistics.module.css'\n/* как через дефис получать класс в ксс модулях?? */\nconsole.log('styles :>> ', styles);\n\n//кнопки статистики.\n//options - это коллбек методов класса секции\nconst FeedbackOptions = ({options}) =>{\nreturn(\n        <div className={styles.FeedbackOptions}>\n            <button className={styles.btn} onClick={options.leaveGood}>Good</button>\n            <button className={styles.btn} onClick={options.leaveNeutral}>Neutral</button>\n            <button className={styles.btn} onClick={options.leaveBad}>Bad</button>\n        </div>\n\n)\n}\n//\n\n\n//принимает данные статистики и выводит их \nconst Statistics = ({good,neutral,bad,total,positiveDomination}) =>{\n    return(\n    <div className={styles.Statistics}>\n            <span className={styles.stat}>Good: {good}</span>\n            <span className={styles.stat}>Neutral: {neutral}</span>\n            <span className={styles.stat}>Bad: {bad}</span>\n            <span className={styles.stat}>Total: {total}</span>\n            <span className={styles.stat}>\n            Positive feedback domination: {positiveDomination}%\n            </span>\n        </div>\n        )\n}\n//\n\n\n//классовый компонент секции. он тут всем заправляет\nclass Section extends React.Component{\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    }\n    //сумму и процент позитивных никуда не записываю, просто возвращаю из коллбек функций\n\n\n    //коллбеки. ничего особенного.\n    leaveGood = ()=>this.setState({good: this.state.good+1});\n\n    leaveBad = () =>this.setState({bad: bad+1});\n\n    leaveNeutral = ()=> this.setState({neutral: this.state.neutral+1});\n    //\n\n    //сумма. юзается уже в рендере и в подсчете позитивщиков\n    countTotal = () => this.state.good+this.state.neutral+this.state.bad;\n    //\n\n    // подсчет людей, которые нажали не ту кнопку\n    howManyPositive =()=> Math.round(100/this.countTotal()*(this.state.good));\n    //\n\n\n    render(){\n        return(\n        <div className={styles.Section}>\n            <span className={styles.title}>{this.props.title}</span>\n\n        {/* не понимаю к чему в задании был onLeaveFeedback помимо options */}\n            <FeedbackOptions \n            options={{\n            leaveGood: this.leaveGood,\n            leaveNeutral: this.leaveNeutral,\n            leaveBad:this.leaveBad\n            }}/>\n\n\n            {/* проверка на статистику */}\n            {this.countTotal()>=1 \n            ? <Statistics \n            good={this.state.good}\n            neutral={this.state.neutral} \n            bad={this.state.bad} \n            total={this.countTotal()} \n            positiveDomination={this.howManyPositive()}/>\n            : <span className={styles.noFeedback}>No feedback given. U can be first</span>\n            }\n        </div>\n        )\n    }\n}\n\n\nexport default Section;"]},"metadata":{},"sourceType":"module"}