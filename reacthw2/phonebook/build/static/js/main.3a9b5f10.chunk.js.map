{"version":3,"sources":["components/Statistics.module.css","components/Statistics.js","index.js"],"names":["module","exports","FeedbackOptions","options","className","styles","onClick","leaveGood","leaveNeutral","leaveBad","Statistics","good","neutral","bad","total","positiveDomination","Section","state","setState","countTotal","howManyPositive","Math","round","this","props","title","React","Component","App","ReactDOM","render","document","querySelector"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,QAAU,4BAA4B,MAAQ,0BAA0B,mBAAmB,qCAAqC,IAAM,wBAAwB,WAAa,+BAA+B,KAAO,yBAAyB,WAAa,iC,oJCInQC,EAAkB,SAAC,GAAc,IAAbC,EAAY,EAAZA,QAE1B,OACQ,yBAAKC,UAAWC,IAAO,qBACnB,4BAAQD,UAAWC,IAAM,IAASC,QAASH,EAAQI,WAAnD,QACA,4BAAQH,UAAWC,IAAM,IAASC,QAASH,EAAQK,cAAnD,WACA,4BAAQJ,UAAWC,IAAM,IAASC,QAASH,EAAQM,UAAnD,SASNC,EAAa,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,KAAKC,EAAyC,EAAzCA,QAAQC,EAAiC,EAAjCA,IAAIC,EAA6B,EAA7BA,MAAMC,EAAuB,EAAvBA,mBACxC,OACA,yBAAKX,UAAWC,IAAM,YACd,0BAAMD,UAAWC,IAAM,MAAvB,SAAwCM,GACxC,0BAAMP,UAAWC,IAAM,MAAvB,YAA2CO,GAC3C,0BAAMR,UAAWC,IAAM,MAAvB,QAAuCQ,GACvC,0BAAMT,UAAWC,IAAM,MAAvB,UAAyCS,GACzC,0BAAMV,UAAWC,IAAM,MAAvB,iCAC+BU,EAD/B,OAuEGC,E,4MAxDXC,MAAQ,CACJN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAMTN,UAAY,kBAAI,EAAKW,SAAS,CAACP,KAAM,EAAKM,MAAMN,KAAK,K,EAErDF,SAAW,kBAAK,EAAKS,SAAS,CAACL,IAAK,EAAKI,MAAMJ,IAAI,K,EAEnDL,aAAe,kBAAK,EAAKU,SAAS,CAACN,QAAS,EAAKK,MAAML,QAAQ,K,EAI/DO,WAAa,kBAAM,EAAKF,MAAMN,KAAK,EAAKM,MAAML,QAAQ,EAAKK,MAAMJ,K,EAIjEO,gBAAiB,kBAAKC,KAAKC,MAAM,IAAI,EAAKH,aAAc,EAAKF,MAAMN,O,uDAK/D,OACA,yBAAKP,UAAWC,IAAM,SAClB,0BAAMD,UAAWC,IAAM,OAAYkB,KAAKC,MAAMC,OAG9C,kBAAC,EAAD,CACAtB,QAAS,CACTI,UAAWgB,KAAKhB,UAChBC,aAAce,KAAKf,aACnBC,SAASc,KAAKd,YAKbc,KAAKJ,cAAc,EAClB,kBAAC,EAAD,CACFR,KAAMY,KAAKN,MAAMN,KACjBC,QAASW,KAAKN,MAAML,QACpBC,IAAKU,KAAKN,MAAMJ,IAChBC,MAAOS,KAAKJ,aACZJ,mBAAoBQ,KAAKH,oBACvB,0BAAMhB,UAAWC,IAAM,YAAvB,0C,GAhDQqB,IAAMC,WClCtBC,EAAM,WACV,OACA,yBAAKxB,UAAU,OACb,kBAAC,EAAD,CAASqB,MAAM,yBAKnBI,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,cAAc,W","file":"static/js/main.3a9b5f10.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Statistics_Section__1MFBo\",\"title\":\"Statistics_title__3vLQI\",\"feedback-options\":\"Statistics_feedback-options__zxJq-\",\"btn\":\"Statistics_btn__3WafB\",\"Statistics\":\"Statistics_Statistics__T-iO2\",\"stat\":\"Statistics_stat__2FClx\",\"noFeedback\":\"Statistics_noFeedback__1EyNt\"};","import React from 'react';\nimport styles from './Statistics.module.css'\n\n//кнопки статистики.\n//options - это методов класса секции(коллбеки, которые я передаю)\nconst FeedbackOptions = ({options}) =>{\n    \nreturn(\n        <div className={styles['feedback-options']}>\n            <button className={styles['btn']} onClick={options.leaveGood}>Good</button>\n            <button className={styles['btn']} onClick={options.leaveNeutral}>Neutral</button>\n            <button className={styles['btn']} onClick={options.leaveBad}>Bad</button>\n        </div>\n\n)\n}\n//\n\n\n//принимает данные статистики и выводит их \nconst Statistics = ({good,neutral,bad,total,positiveDomination}) =>{\n    return(\n    <div className={styles['Statistics']}>\n            <span className={styles['stat']}>Good: {good}</span>\n            <span className={styles['stat']}>Neutral: {neutral}</span>\n            <span className={styles['stat']}>Bad: {bad}</span>\n            <span className={styles['stat']}>Total: {total}</span>\n            <span className={styles['stat']}>\n            Positive feedback domination: {positiveDomination}%\n            </span>\n        </div>\n        )\n}\n//\n\n\n//классовый компонент секции. он тут всем заправляет\n//сделал его для всей отрисовки вообще. не знаю каким образом можно \n//перерисовывать сами статы без кнопок, ведь смысл кнопки перерисовывать\n//была идея сделать кнопки классом, но тогда кнопки будут обновляться тоже\n//в общем хочу перерисовывать только статы, а сделал очень тупо\nclass Section extends React.Component{\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    }\n    //сумму и процент позитивных никуда не записываю, просто возвращаю из коллбек функций\n\n\n    //коллбеки. ничего особенного.\n    leaveGood = ()=>this.setState({good: this.state.good+1});\n\n    leaveBad = () =>this.setState({bad: this.state.bad+1});\n\n    leaveNeutral = ()=> this.setState({neutral: this.state.neutral+1});\n    //\n\n    //сумма\n    countTotal = () => this.state.good+this.state.neutral+this.state.bad;\n    //\n\n    // подсчет процентов позитивных\n    howManyPositive =()=> Math.round(100/this.countTotal()*(this.state.good));\n    //\n\n\n    render(){\n        return(\n        <div className={styles['Section']}>\n            <span className={styles['title']}>{this.props.title}</span>\n\n        {/* не понимаю к чему в задании был onLeaveFeedback помимо options */}\n            <FeedbackOptions \n            options={{\n            leaveGood: this.leaveGood,\n            leaveNeutral: this.leaveNeutral,\n            leaveBad:this.leaveBad\n            }}/>\n\n\n            {/* проверка на статистику */}\n            {this.countTotal()>=1 \n            ? <Statistics \n            good={this.state.good}\n            neutral={this.state.neutral} \n            bad={this.state.bad} \n            total={this.countTotal()} \n            positiveDomination={this.howManyPositive()}/>\n            : <span className={styles['noFeedback']}>No feedback given. U can be first</span>\n            }\n        </div>\n        )\n    }\n}\n\n\n\nexport default Section;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nimport Section from './components/Statistics';\n\nconst App = ()=>{\n  return(\n  <div className='App'>\n    <Section title='Plz leave feedback'/>\n  </div>\n  )\n}\n\nReactDOM.render(<App/>, document.querySelector('#root'));"],"sourceRoot":""}